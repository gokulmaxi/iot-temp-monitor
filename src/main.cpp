#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Adafruit_MLX90614.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1    // Reset pin # (or -1 if sharing Arduino reset pin)
#define SS_PIN D4
#define RST_PIN D3
int response;
int offset = 6.5;
// 'oled', 128x64px
const unsigned char myBitmap [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x7c, 0xc1, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x90, 0xc3, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x90, 0xc3, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x90, 0xc2, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x90, 0xc7, 0xda, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x90, 0xc7, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x10, 0xfc, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x10, 0x7c, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0xfc, 0x7f, 0xf8, 0xfe, 0x00, 0xfc, 0x18, 0x00, 0xc6, 0x00, 0x08, 0x00, 0x00, 0x7f, 0x00, 
	0x03, 0xfc, 0x7f, 0xf9, 0xff, 0x83, 0xfe, 0x1c, 0x01, 0xce, 0x00, 0x7f, 0x0f, 0xc0, 0xff, 0x80, 
	0x07, 0xfc, 0x7f, 0xf9, 0xff, 0x83, 0xff, 0x3e, 0x01, 0xce, 0x00, 0xff, 0x9f, 0xe0, 0xff, 0xc0, 
	0x07, 0x80, 0x07, 0x81, 0xe7, 0xc7, 0x8f, 0x3e, 0x03, 0xce, 0x01, 0xff, 0xff, 0xf8, 0xe3, 0xe0, 
	0x07, 0x00, 0x03, 0x81, 0xc1, 0xc7, 0x03, 0xbf, 0x07, 0xce, 0x01, 0xff, 0xff, 0xf8, 0xe0, 0xe0, 
	0x07, 0x00, 0x03, 0x81, 0xc1, 0xc7, 0x03, 0xbf, 0x87, 0xce, 0x03, 0xff, 0xff, 0xfc, 0xe0, 0xe0, 
	0x03, 0xc0, 0x03, 0x81, 0xc1, 0xc7, 0x03, 0xbb, 0x8f, 0xce, 0x03, 0xc1, 0xf8, 0x3c, 0xe0, 0xe0, 
	0x03, 0xe0, 0x03, 0x81, 0xc1, 0xce, 0x03, 0xb9, 0x8e, 0xce, 0x07, 0xc1, 0xf0, 0x3c, 0xe0, 0xe0, 
	0x01, 0xf0, 0x03, 0x81, 0xc3, 0xce, 0x03, 0xb9, 0xdc, 0xce, 0x07, 0xc0, 0xf0, 0x3c, 0xe1, 0xe0, 
	0x00, 0xf8, 0x03, 0x81, 0xff, 0x8e, 0x03, 0xb9, 0xfc, 0xce, 0x07, 0xc0, 0xf0, 0x3e, 0xff, 0xc0, 
	0x00, 0x3c, 0x03, 0x81, 0xff, 0x0e, 0x03, 0xb8, 0xf8, 0xce, 0x07, 0xc0, 0xf0, 0x3c, 0xff, 0xc0, 
	0x00, 0x1e, 0x03, 0x81, 0xef, 0x87, 0x03, 0xb8, 0x78, 0xce, 0x07, 0xc1, 0xf8, 0x3c, 0xff, 0x00, 
	0x00, 0x1e, 0x03, 0x81, 0xc3, 0x87, 0x03, 0xb8, 0x70, 0xce, 0x03, 0xe3, 0xf8, 0x7c, 0xe0, 0x00, 
	0x00, 0x0e, 0x03, 0x81, 0xc3, 0xc7, 0x03, 0xb8, 0x00, 0xce, 0x03, 0xff, 0xff, 0xf8, 0xe0, 0x00, 
	0x00, 0x0e, 0x03, 0x81, 0xc1, 0xc7, 0x87, 0x38, 0x00, 0xce, 0x01, 0xff, 0xff, 0xf8, 0xe0, 0x00, 
	0x07, 0xfe, 0x03, 0x81, 0xc1, 0xc3, 0xff, 0x38, 0x00, 0xcf, 0xf8, 0xff, 0xff, 0xf0, 0xe0, 0x00, 
	0x07, 0xfc, 0x03, 0x81, 0xc1, 0xc3, 0xfe, 0x38, 0x00, 0xcf, 0xfc, 0x7f, 0x9f, 0xe0, 0xe0, 0x00, 
	0x03, 0xf8, 0x03, 0x00, 0xc0, 0xc1, 0xfc, 0x18, 0x00, 0xc7, 0xfc, 0x1e, 0x07, 0xc0, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x77, 0xd8, 0xe7, 0xa2, 0x70, 0xa0, 0xbf, 0x09, 0xea, 0x2e, 0x00, 0x44, 0xe3, 0x9c, 0x38, 0xfc, 
	0x77, 0xd9, 0xff, 0xa2, 0xf1, 0xf2, 0xff, 0x9b, 0xfe, 0x2e, 0x33, 0x65, 0xf3, 0x9e, 0x3d, 0xfc, 
	0xc3, 0x39, 0x93, 0x22, 0xd9, 0xf2, 0x89, 0x98, 0x8a, 0x68, 0x33, 0x65, 0x9a, 0x12, 0x25, 0x90, 
	0x63, 0x3d, 0xb3, 0x22, 0xd9, 0xfa, 0x89, 0xbc, 0x8b, 0x4e, 0x33, 0x75, 0x8b, 0x9e, 0x3d, 0x90, 
	0x73, 0x3d, 0xf3, 0x22, 0xf1, 0xee, 0x89, 0xbc, 0x89, 0x4e, 0x33, 0x55, 0x8b, 0x9e, 0x3d, 0x90, 
	0x1b, 0x3d, 0xb3, 0x22, 0xe1, 0xee, 0x89, 0xbc, 0x89, 0xc8, 0x33, 0x5d, 0x9a, 0x16, 0x25, 0x90, 
	0x1b, 0x67, 0xb3, 0x26, 0xc1, 0xe6, 0x89, 0xa6, 0x89, 0xc8, 0x33, 0x4d, 0x9a, 0x12, 0x25, 0x90, 
	0xf3, 0x67, 0x93, 0x3c, 0xc1, 0xe6, 0x89, 0xe2, 0x89, 0x8f, 0x1e, 0x4d, 0xf3, 0xd2, 0x3d, 0x90, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
Adafruit_MLX90614 mlx = Adafruit_MLX90614();
MFRC522 mfrc522(SS_PIN, RST_PIN); // Instance of the class
const int trigPin = D0;           //D4
const int echoPin = D8;           //D3
long duration;
int distance;
bool distanceState;
int LED_SUCCESS = 10;
double temp_amb;
double temp_obj;
float Fahrenheit;
int a = 1;
String tag = "";
//const char *ssid = "life with iot"; //ENTER YOUR WIFI SETTINGS
//const char *password = "12345678";
const char *ssid = "IOT LAB"; //ENTER YOUR WIFI SETTINGS
const char *password = "IoT$2020";
//const char *host = "192.168.43.103:8080"; //https://circuits4you.com website or IP address of server
void setup()
{
  Serial.begin(115200);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT);  // Sets the echoPin as an Input
  pinMode(LED_SUCCESS, OUTPUT);
  digitalWrite(LED_SUCCESS, LOW);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(1000);
    Serial.print("Connecting..");
  }
  SPI.begin();        // Init SPI bus
  mfrc522.PCD_Init(); // Init MFRC522
  Serial.println("RFID reading UID");
  mlx.begin();
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //initialize with the I2C addr 0x3C (128x64)
  Serial.println("IOT LAB-BIT");
  display.clearDisplay();
  display.setCursor(25, 15);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.println("IOT LAB");
  display.setCursor(25, 35);
  display.setTextSize(2);
  display.print("BIT");
  display.display();
  delay(1000);
}

int post_http(String data1, String data2)
{
  HTTPClient http; //Declare object of class HTTPClient
  String postData;
  //Post Data
  postData = "station=" + data1 + "&status=" + data2;
  http.begin("http://10.10.110.2:3000");                               //Specify request destination
  http.addHeader("Content-Type", "application/x-www-form-urlencoded"); //Specify content-type header
  int httpCode = http.POST(postData);                                  //Send the request
  String payload = http.getString();                                   //Get the response payload
  Serial.println(httpCode);                                            //Print HTTP return code
  Serial.println(payload);                                             //Print request response payload

  //--------
  if (httpCode == 200)
  {
    display.clearDisplay();
    display.setCursor(25, 15);
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.println("OKAY");
    display.setCursor(25, 35);
    display.setTextSize(2);
    display.print(payload);
    display.display();

    digitalWrite(LED_SUCCESS, HIGH);
    delay(1000);
    digitalWrite(LED_SUCCESS, LOW);
  }
  else
  {
    display.clearDisplay();
    display.setCursor(25, 15);
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.println("SERVER");
    display.setCursor(25, 35);
    display.setTextSize(2);
    display.print("ERROR");
    display.display();

    digitalWrite(LED_SUCCESS, HIGH);
    delay(5000);
    digitalWrite(LED_SUCCESS, LOW);
  }
  //Close connection
  http.end();
  //--------
  return httpCode;
}

bool distance_measure()
{
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  if (distance < 10)
  {
    return true;
  }
  else
  {
    //--------
    digitalWrite(LED_SUCCESS, LOW);
    //--------
    return false;
  }
}
void loop()
{
  display.clearDisplay();
  display.drawBitmap(0, 0, myBitmap, 128, 64, WHITE);
  display.display();
  if (mfrc522.PICC_IsNewCardPresent())
  {
    if (mfrc522.PICC_ReadCardSerial())
    {
      Serial.print("RFID NO:");
      Serial.print(a);
      Serial.print(" Tag UID:");
      for (byte i = 0; i < mfrc522.uid.size; i++)
      {
        tag.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : ""));
        tag.concat(String(mfrc522.uid.uidByte[i], HEX));
      }
      tag = "08" + tag;
      tag.toUpperCase();
      Serial.print(tag);
      while (!distance_measure())
      {
        Serial.print("come closer");
        Serial.print("come closer");
        display.clearDisplay();
        display.setCursor(35, 10);
        display.setTextSize(3);
        display.setTextColor(WHITE);
        display.println("COME  CLOSER");
        //        digitalWrite(LED_SUCCESS, LOW);
        display.display();
        delay(500);
      }
      if (distance_measure())
      {
        Serial.print("Hold on");
        temp_amb = mlx.readAmbientTempF();
        temp_obj = mlx.readObjectTempF() + offset;
        if (temp_obj > 102)
        {
          display.clearDisplay();
          display.setCursor(25, 15);
          display.setTextSize(2);
          display.setTextColor(WHITE);
          display.println("MEDICAL");
          display.setCursor(25, 35);
          display.setTextSize(2);
          display.print("EMERGENCY");
          display.display();
          digitalWrite(LED_SUCCESS, HIGH);
          delay(5000);
          digitalWrite(LED_SUCCESS, LOW);
          delay(1000);
          digitalWrite(LED_SUCCESS, HIGH);
          delay(5000);
          digitalWrite(LED_SUCCESS, LOW);
          delay(1000);
          digitalWrite(LED_SUCCESS, HIGH);
          delay(5000);
          digitalWrite(LED_SUCCESS, LOW);
        }
        display.clearDisplay();
        display.setCursor(25, 10);
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.println("Temperature");
        display.setCursor(25, 30);
        display.setTextSize(2);
        display.print(temp_obj);
        display.print((char)247);
        display.print("F");
        display.display();
        //  delay(1000);
        int response = post_http(tag, String(temp_obj));
        tag = "";

        //        digitalWrite(LED_SUCCESS, HIGH);
        //        delay(1000);
        //        //--------
        //        digitalWrite(LED_SUCCESS, LOW);
        //        //--------
      }
    }
  }

  delay(1000);
  mfrc522.PICC_HaltA();
  a = a + 1;
}
